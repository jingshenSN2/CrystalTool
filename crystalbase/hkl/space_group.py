def generate_pairs_by_laue(hkl_tuple, laue):
    pairs = set()
    h, k, l = hkl_tuple
    params = {'h': h, 'k': k, 'l': l}
    operation = symmetric_operations[laue]
    for op in operation:
        op_h, op_k, op_l = op
        new_hkl_tuple = eval(op_h, params), eval(op_k, params), eval(op_l, params)
        pairs.add(new_hkl_tuple)
    return pairs


laue_group_name = {
    0: '0',
    1: '-1',
    2: '2/m',
    3: 'mmm',
    4: '4/m',
    5: '4/mmm',
    6: '-3',
    7: '-3(R)',
    8: '-3m1',
    9: '-31m',
    10: '-3m(R)',
    11: '6/m',
    12: '6/mmm',
    13: 'm-3',
    14: 'm-3m'
}

symmetric_operations = {
    0: [('h', 'k', 'l')],  # no laue group
    1: [('h', 'k', 'l'),
        ('-h', '-k', '-l')],  # laue group: -1
    2: [('h', 'k', 'l'),
        ('-h', 'k', '-l'),
        ('h', '-k', 'l'),
        ('-h', '-k', '-l')],  # laue group: 2/m
    3: [('h', 'k', 'l'),
        ('-h', '-k', '-l'),
        ('-h', 'k', 'l'),
        ('h', '-k', 'l'),
        ('h', 'k', '-l'),
        ('h', '-k', '-l'),
        ('-h', 'k', '-l'),
        ('-h', '-k', 'l')],  # laue group: mmm
    4: [('h', 'k', 'l'),
        ('-h', '-k', 'l'),
        ('-k', 'h', 'l'),
        ('k', '-h', 'l'),
        ('h', 'k', '-l'),
        ('-h', '-k', '-l'),
        ('-k', 'h', '-l'),
        ('k', '-h', '-l')],  # laue group: 4/m
    5: [('h', 'k', 'l'),
        ('-h', '-k', 'l'),
        ('h', '-k', 'l'),
        ('-h', 'k', 'l'),
        ('h', 'k', '-l'),
        ('-h', '-k', '-l'),
        ('h', '-k', '-l'),
        ('-h', 'k', '-l'),
        ('k', 'h', 'l'),
        ('-k', '-h', 'l'),
        ('-k', 'h', 'l'),
        ('k', '-h', 'l'),
        ('k', 'h', '-l'),
        ('-k', '-h', '-l'),
        ('-k', 'h', '-l'),
        ('k', '-h', '-l')],  # laue group: 4/mmm
    6: [('h', 'k', 'l'),
        ('-h-k', 'h', 'l'),
        ('k', '-h-k', 'l'),
        ('-h', '-k', '-l'),
        ('h+k', '-h', '-l'),
        ('-k', 'h+k', '-l')],  # laue group: -3
    7: [('h', 'k', 'l'),
        ('l', 'h', 'k'),
        ('k', 'l', 'h'),
        ('-h', '-k', '-l'),
        ('-l', '-h', '-k'),
        ('-k', '-l', '-h')],  # laue group: -3(R)
    8: [('h', 'k', 'l'),
        ('-h-k', 'h', 'l'),
        ('k', '-h-k', 'l'),
        ('-h', '-k', '-l'),
        ('h+k', '-h', '-l'),
        ('-k', 'h+k', '-l'),
        ('k', 'h', '-l'),
        ('h', '-h-k', '-l'),
        ('-h-k', 'k', '-l'),
        ('-k', '-h', 'l'),
        ('-h', 'h+k', 'l'),
        ('h+k', '-k', 'l')],  # laue group: -3m1
    9: [('h', 'k', 'l'),
        ('-h-k', 'h', 'l'),
        ('k', '-h-k', 'l'),
        ('-h', '-k', '-l'),
        ('h+k', '-h', '-l'),
        ('-k', 'h+k', '-l'),
        ('k', 'h', 'l'),
        ('h', '-h-k', 'l'),
        ('-h-k', 'k', 'l'),
        ('-k', '-h', '-l'),
        ('-h', 'h+k', '-l'),
        ('h+k', '-k', '-l')],  # laue group: -31m
    10: [('h', 'k', 'l'),
         ('k', 'l', 'h'),
         ('l', 'h', 'k'),
         ('k', 'h', 'l'),
         ('h', 'l', 'k'),
         ('l', 'k', 'h'),
         ('-h', '-k', '-l'),
         ('-k', '-l', '-h'),
         ('-l', '-h', '-k'),
         ('-k', '-h', '-l'),
         ('-h', '-l', '-k'),
         ('-l', '-k', '-h')],  # laue group: -3m(R)
    11: [('h', 'k', 'l'),
         ('-h-k', 'h', 'l'),
         ('k', '-h-k', 'l'),
         ('-h', '-k', 'l'),
         ('h+k', '-h', 'l'),
         ('-k', 'h+k', 'l'),
         ('h', 'k', '-l'),
         ('-h-k', 'h', '-l'),
         ('k', '-h-k', '-l'),
         ('-h', '-k', '-l'),
         ('h+k', '-h', '-l'),
         ('-k', 'h+k', '-l')],  # laue group: 6/m
    12: [('h', 'k', 'l'),
         ('-h-k', 'h', 'l'),
         ('k', '-h-k', 'l'),
         ('-h', '-k', 'l'),
         ('h+k', '-h', 'l'),
         ('-k', 'h+k', 'l'),
         ('k', 'h', 'l'),
         ('-h-k', 'k', 'l'),
         ('h', '-h-k', 'l'),
         ('-k', '-h', 'l'),
         ('h+k', '-k', 'l'),
         ('-h', 'h+k', 'l'),
         ('h', 'k', '-l'),
         ('-h-k', 'h', '-l'),
         ('k', '-h-k', '-l'),
         ('-h', '-k', '-l'),
         ('h+k', '-h', '-l'),
         ('-k', 'h+k', '-l'),
         ('k', 'h', '-l'),
         ('-h-k', 'k', '-l'),
         ('h', '-h-k', '-l'),
         ('-k', '-h', '-l'),
         ('h+k', '-k', '-l'),
         ('-h', 'h+k', '-l')],  # laue group: 6/mmm
    13: [('h', 'k', 'l'),
         ('l', 'h', 'k'),
         ('k', 'l', 'h'),
         ('h', 'k', '-l'),
         ('-l', 'h', 'k'),
         ('k', '-l', 'h'),
         ('h', '-k', 'l'),
         ('l', 'h', '-k'),
         ('-k', 'l', 'h'),
         ('h', '-k', '-l'),
         ('-l', 'h', '-k'),
         ('-k', '-l', 'h'),
         ('-h', 'k', 'l'),
         ('l', '-h', 'k'),
         ('k', 'l', '-h'),
         ('-h', 'k', '-l'),
         ('-l', '-h', 'k'),
         ('k', '-l', '-h'),
         ('-h', '-k', 'l'),
         ('l', '-h', '-k'),
         ('-k', 'l', '-h'),
         ('-h', '-k', '-l'),
         ('-l', '-h', '-k'),
         ('-k', '-l', '-h')],  # laue group: m-3
    14: [('h', 'k', 'l'),
         ('h', 'l', 'k'),
         ('l', 'h', 'k'),
         ('l', 'k', 'h'),
         ('k', 'h', 'l'),
         ('k', 'l', 'h'),
         ('h', 'k', '-l'),
         ('h', '-l', 'k'),
         ('-l', 'h', 'k'),
         ('-l', 'k', 'h'),
         ('k', 'h', '-l'),
         ('k', '-l', 'h'),
         ('h', '-k', 'l'),
         ('h', 'l', '-k'),
         ('l', 'h', '-k'),
         ('l', '-k', 'h'),
         ('-k', 'h', 'l'),
         ('-k', 'l', 'h'),
         ('h', '-k', '-l'),
         ('h', '-l', '-k'),
         ('-l', 'h', '-k'),
         ('-l', '-k', 'h'),
         ('-k', 'h', '-l'),
         ('-k', '-l', 'h'),
         ('-h', 'k', 'l'),
         ('-h', 'l', 'k'),
         ('l', '-h', 'k'),
         ('l', 'k', '-h'),
         ('k', '-h', 'l'),
         ('k', 'l', '-h'),
         ('-h', 'k', '-l'),
         ('-h', '-l', 'k'),
         ('-l', '-h', 'k'),
         ('-l', 'k', '-h'),
         ('k', '-h', '-l'),
         ('k', '-l', '-h'),
         ('-h', '-k', 'l'),
         ('-h', 'l', '-k'),
         ('l', '-h', '-k'),
         ('l', '-k', '-h'),
         ('-k', '-h', 'l'),
         ('-k', 'l', '-h'),
         ('-h', '-k', '-l'),
         ('-h', '-l', '-k'),
         ('-l', '-h', '-k'),
         ('-l', '-k', '-h'),
         ('-k', '-h', '-l'),
         ('-k', '-l', '-h')]  # laue group: m-3m
}

if __name__ == '__main__':
    for i in range(1, 15):
        generate_pairs_by_laue((1, 2, 3), i)
